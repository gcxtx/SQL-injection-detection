%header {:
package AST;
import AST.*;
import utility.LabelUtility;
:};

%embed {:
  class Events extends Parser.Events {
    public void syntaxError(Symbol token) {
      StringBuffer s = new StringBuffer();
      s.append(token.getLine(token.getStart()) + ", " + token.getColumn(token.getStart()) + "\n");
      s.append("  *** Syntactic error: unexpected token " + Terminals.NAMES[token.getId()]);
      throw new Error(s.toString());
    }
    public void scannerError(Scanner.Exception e) {
      StringBuffer s = new StringBuffer();
      s.append(e.line + ", " + e.column + "\n");
      s.append("  *** Lexical error: " + e.getMessage());
      throw new Error(s.toString());
    }
  }
  {LabelUtility.reset();  
  report = new Events(); } // Use error handler in parser
:};

%goal goal;
Program goal =
  mainblock                            {: return new Program(mainblock); :}
  ;
 
S mainblock =
    PHPBEGIN blockStmtList PHPEND      {: return new CompoundS(blockStmtList); :}
  ; 
   
S block =
    LBRACE blockStmtList RBRACE        {: return new CompoundS(blockStmtList); :}
  ;
  

List blockStmtList =
    stmt                				{: return new List().add(stmt); :}
  | blockStmtList  stmt           		{: return blockStmtList.add(stmt); :}
  ;
  
S stmt =
    IDENTIFIER ASSIGN expression.e SEMICOLON   {: return new AssignS(new NumLabel(LabelUtility.nextLabel()), IDENTIFIER, e); :}
  | IF LPAREN expression.be RPAREN block.b ELSE block.c  {: return new IfS(new LabeledExpr(new NumLabel(LabelUtility.nextLabel()), be), b, c); :}
  | WHILE LPAREN expression.be RPAREN block     {: return new WhileS(new LabeledExpr(new NumLabel(LabelUtility.nextLabel()), be), block); :}
  | ECHO expression.be SEMICOLON          {: return new EchoS(new NumLabel(LabelUtility.nextLabel()), be); :}
  | REQUIRE FILEVAR SEMICOLON          {: return new RequireS(new NumLabel(LabelUtility.nextLabel()), new FileLitExpr(FILEVAR)); :}
  ;


Expr strprimary =
	   STRVAR					  {: return new StrLitExpr(STRVAR); :}
	 ;

Expr strfactor =
     strprimary.p                 {: return p; :}  
   | strfactor.l OPPLUS strprimary.r 
                                  {: return new StringExpr(l, new Op_s(OPPLUS), r); :}
   ;

Expr strfactor2 =
	strfactor.l OPPLUS IDENTIFIER
								 {: return new StringExpr(l, new Op_s(OPPLUS), new VarRefExpr(IDENTIFIER)); :}
   ;
   
Expr primary =
       IDENTIFIER                {: return new VarRefExpr(IDENTIFIER); :}
     | NUMBER                   {: return new NumLitExpr(NUMBER); :}  
     | TRUE                     {: return new BoolLitExpr(TRUE); :}
     | FALSE                    {: return new BoolLitExpr(FALSE); :}
     | NOT primary.e            {: return new NotExpr(e); :}
     | LPAREN expression.e RPAREN {: return e; :}
     ;
     
Expr factor =
     primary.p                 {: return p; :}
   | factor.l OPMUL primary.r 
                               {: return new ABinaryExpr(l, new Op_a(OPMUL), r); :}
   ;
   
Expr aexpression =
     factor.f                  {: return f; :}
   | aexpression.l OPPLUS factor.r
                               {: return new ABinaryExpr(l, new Op_a(OPPLUS), r); :}
   | aexpression.l OPMINUS factor.r
                               {: return new ABinaryExpr(l, new Op_a(OPMINUS), r); :}
   ;
   
Expr relexp =
       aexpression
     | aexpression.l OPRELATIONAL aexpression.r 
                                {: return new RelExpr(l, new Op_r(OPRELATIONAL), r); :}
     ;

Expr conj =
       relexp.re               {: return re; :}
     | conj.l AND relexp.r 
                               {: return new LogicExpr(l, new Op_b(AND), r); :}
     ;
     
Expr expression = 
       conj.c                  {: return c; :}                        
     | expression.l OR conj.r 
                               {: return new LogicExpr(l, new Op_b(OR), r); :}
     | POST LSBRACE READIDENTIFIER RSBRACE 
     						   {: return new PostExpr(READIDENTIFIER); :}
     | SQL LPAREN IDENTIFIER.l SEP IDENTIFIER.r RPAREN 
     						   {: return new SqlExpr(new VarRefExpr(l),new VarRefExpr(r)); :}
     | SQLNUMROWS LPAREN IDENTIFIER RPAREN 
     						   {: return new SqlNumRowsExpr(new VarRefExpr(IDENTIFIER)); :}						   
     | strfactor.s             {: return s; :}						   	
     | strfactor2.s
     						   	{: return s; :}					   
						   
     
     ;						   
